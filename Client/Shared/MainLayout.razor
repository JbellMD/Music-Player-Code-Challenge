@inherits LayoutComponentBase
@inject IThemeService ThemeService

<MudThemeProvider @bind-IsDarkMode="@ThemeService.IsDarkMode" Theme="@_theme" />
<MudDialogProvider />
<MudSnackbarProvider />

<div class="@($"app-container {(ThemeService.IsDarkMode ? "dark" : "")}")">
    <MudLayout>
        <MudAppBar Elevation="1" Color="@(ThemeService.IsDarkMode ? Color.Dark : Color.Surface)" Class="border-b border-gray-200 dark:border-gray-800">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            <MudText Typo="Typo.h6" Class="ml-4">Music Manager</MudText>
            <MudSpacer />
            <MudIconButton Icon="@(ThemeService.IsDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)" 
                          Color="Color.Inherit" 
                          OnClick="@ToggleTheme" />
            <MudIconButton Icon="@Icons.Material.Filled.Notifications" Color="Color.Inherit" OnClick="@(() => _showNotifications = !_showNotifications)" />
        </MudAppBar>

        <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2" Color="@(ThemeService.IsDarkMode ? Color.Dark : Color.Surface)" Variant="@DrawerVariant.Mini" Class="border-r border-gray-200 dark:border-gray-800">
            <NavMenu />
        </MudDrawer>

        <MudMainContent>
            <div class="@($"min-h-screen bg-gradient-to-br {(ThemeService.IsDarkMode ? "from-gray-900 to-gray-800" : "from-gray-50 to-white")}")">
                <div class="pt-16">
                    <NotificationList @bind-IsOpen="_showNotifications" />
                    @Body
                </div>
            </div>
        </MudMainContent>
    </MudLayout>
</div>

<style>
    .app-container {
        height: 100vh;
        width: 100vw;
    }
    
    .app-container.dark {
        color-scheme: dark;
    }
</style>

@code {
    private bool _drawerOpen = true;
    private bool _showNotifications;

    private MudTheme _theme = new MudTheme
    {
        Palette = new PaletteLight
        {
            Primary = "#6366f1",
            Secondary = "#ec4899",
            Background = "#f8fafc",
            Surface = "#ffffff",
            AppbarBackground = "#6366f1",
            DrawerBackground = "#ffffff",
            DrawerText = "#1e293b",
            TextPrimary = "#1e293b",
            TextSecondary = "#64748b",
            ActionDefault = "#1e293b",
            BackgroundGrey = "#f1f5f9",
            DrawerIcon = "#1e293b"
        },
        PaletteDark = new PaletteDark
        {
            Primary = "#6366f1",
            Secondary = "#ec4899",
            Background = "#0f172a",
            Surface = "#1e293b",
            AppbarBackground = "#1e293b",
            DrawerBackground = "#0f172a",
            DrawerText = "#e2e8f0",
            TextPrimary = "#e2e8f0",
            TextSecondary = "#94a3b8",
            ActionDefault = "#e2e8f0",
            BackgroundGrey = "#1e293b",
            DrawerIcon = "#e2e8f0"
        }
    };

    protected override void OnInitialized()
    {
        ThemeService.ThemeChanged += OnThemeChanged;
    }

    private void OnThemeChanged(object? sender, bool isDarkMode)
    {
        StateHasChanged();
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void ToggleTheme()
    {
        ThemeService.IsDarkMode = !ThemeService.IsDarkMode;
    }

    public void Dispose()
    {
        ThemeService.ThemeChanged -= OnThemeChanged;
    }
}