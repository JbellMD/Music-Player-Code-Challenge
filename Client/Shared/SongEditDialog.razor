@using music_manager_starter.Shared
@inject ISongService SongService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudContainer Style="max-height: 500px; overflow-y: scroll">
            <MudTextField @bind-Value="@Song.Title" 
                         Label="Title" 
                         Variant="Variant.Outlined"
                         Required="true" 
                         RequiredError="Title is required" />
            
            <MudTextField @bind-Value="@Song.Artist" 
                         Label="Artist" 
                         Variant="Variant.Outlined"
                         Required="true" 
                         RequiredError="Artist is required" />
            
            <MudTextField @bind-Value="@Song.Album" 
                         Label="Album" 
                         Variant="Variant.Outlined"
                         Required="true" 
                         RequiredError="Album is required" />
            
            <MudTextField @bind-Value="@Song.Genre" 
                         Label="Genre" 
                         Variant="Variant.Outlined"
                         Required="true" 
                         RequiredError="Genre is required" />
            
            <MudNumericField T="int" @bind-Value="@Song.Duration" 
                            Label="Duration (seconds)" 
                            Variant="Variant.Outlined" 
                            Min="0" />
            
            <MudDatePicker Date="@Song.ReleaseDate" DateChanged="@(date => Song.ReleaseDate = date ?? DateTime.Now)"
                          Label="Release Date"
                          Variant="Variant.Outlined" />
            
            <MudFileUpload T="IBrowserFile" FilesChanged="OnFileChanged">
                <ButtonTemplate>
                    <MudButton HtmlTag="button" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">
                        Upload Album Art
                    </MudButton>
                </ButtonTemplate>
            </MudFileUpload>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">@(Song.Id == Guid.Empty ? "Create" : "Update")</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public Song Song { get; set; } = new();
    [Parameter] public EventCallback<Song> OnSongSaved { get; set; }

    private async Task Submit()
    {
        try
        {
            if (Song.Id == Guid.Empty)
            {
                var result = await SongService.AddSongAsync(Song);
                if (result != null)
                {
                    await OnSongSaved.InvokeAsync(result);
                    Snackbar.Add("Song created successfully", Severity.Success);
                }
            }
            else
            {
                var result = await SongService.UpdateSongAsync(Song);
                if (result != null)
                {
                    await OnSongSaved.InvokeAsync(result);
                    Snackbar.Add("Song updated successfully", Severity.Success);
                }
            }
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private void Cancel() => MudDialog.Cancel();

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private async Task OnFileChanged(IBrowserFile file)
    {
        if (Song.Id != Guid.Empty)
        {
            try
            {
                var result = await SongService.UploadAlbumArtAsync(Song.Id, file);
                if (!string.IsNullOrEmpty(result))
                {
                    Snackbar.Add("Album art uploaded successfully", Severity.Success);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error uploading album art: {ex.Message}", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Please save the song before uploading album art", Severity.Warning);
        }
    }
}
