@using music_manager_starter.Shared
@using Microsoft.AspNetCore.Components.Forms
@using System.Linq
@inject ISongService SongService
@inject ISnackbar Snackbar

<MudDialog DisableSidePadding="true">
    <DialogContent>
        <MudContainer Class="pa-6">
            <MudForm @ref="_form" @bind-IsValid="@_isValid">
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="Song.Title"
                                    Label="Title"
                                    Required="true"
                                    RequiredError="Title is required"
                                    Variant="Variant.Outlined"
                                    Class="mb-4" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="Song.Artist"
                                    Label="Artist"
                                    Required="true"
                                    RequiredError="Artist is required"
                                    Variant="Variant.Outlined"
                                    Class="mb-4" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="Song.Album"
                                    Label="Album"
                                    Required="true"
                                    RequiredError="Album is required"
                                    Variant="Variant.Outlined"
                                    Class="mb-4" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="Song.Genre"
                                    Label="Genre"
                                    Required="true"
                                    RequiredError="Genre is required"
                                    Variant="Variant.Outlined"
                                    Class="mb-6" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudPaper Elevation="0" Class="pa-4 rounded-lg border-2 border-dashed">
                            <MudFileUpload T="IBrowserFile" MaxFiles="1" OnFilesChanged="OnFileChanged">
                                <ButtonTemplate>
                                    <MudButton HtmlTag="label"
                                             Variant="Variant.Filled"
                                             Color="Color.Primary"
                                             StartIcon="@Icons.Material.Filled.CloudUpload"
                                             for="@context"
                                             Class="rounded-full px-6">
                                        Upload Music File
                                    </MudButton>
                                </ButtonTemplate>
                                <SelectedTemplate>
                                    @if (_selectedFile != null)
                                    {
                                        <MudChip Color="Color.Primary" 
                                                Icon="@Icons.Material.Filled.AudioFile"
                                                Label="true"
                                                Class="mt-2">
                                            @_selectedFile.Name
                                        </MudChip>
                                    }
                                </SelectedTemplate>
                            </MudFileUpload>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudContainer>
    </DialogContent>
    <DialogActions Class="pa-6 pt-2">
        <MudButton OnClick="@Cancel" 
                  Variant="Variant.Text" 
                  Color="Color.Default"
                  Class="rounded-full px-6">Cancel</MudButton>
        <MudButton Color="Color.Primary"
                  Variant="Variant.Filled"
                  Disabled="@(!_isValid || _isSubmitting)"
                  OnClick="@Submit"
                  Class="rounded-full px-6">
            @if (_isSubmitting)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Saving</MudText>
            }
            else
            {
                <MudText>Save</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public Song Song { get; set; } = new();

    private MudForm _form = default!;
    private bool _isValid;
    private bool _isSubmitting;
    private IBrowserFile? _selectedFile;

    private void OnFileChanged(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            _selectedFile = file;
        }
    }

    private async Task Submit()
    {
        if (!_isValid) return;

        _isSubmitting = true;
        try
        {
            if (Song.Id == 0)
            {
                if (_selectedFile == null)
                {
                    Snackbar.Add("Please select a music file", Severity.Warning);
                    return;
                }

                using var stream = _selectedFile.OpenReadStream();
                var result = await SongService.CreateSongAsync(Song, stream, _selectedFile.Name);
                MudDialog.Close(DialogResult.Ok(result));
            }
            else
            {
                var result = await SongService.UpdateSongAsync(Song);
                MudDialog.Close(DialogResult.Ok(result));
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving song: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private void Cancel()
    {
        if (MudDialog is not null)
        {
            MudDialog.Cancel();
        }
    }
}
