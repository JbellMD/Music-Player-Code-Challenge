@using music_manager_starter.Shared
@inject ISongService SongService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudForm @ref="_form" @bind-IsValid="@_isValid">
            <MudTextField @bind-Value="Song.Title"
                         Label="Title"
                         Required="true"
                         RequiredError="Title is required" />

            <MudTextField @bind-Value="Song.Artist"
                         Label="Artist"
                         Required="true"
                         RequiredError="Artist is required" />

            <MudTextField @bind-Value="Song.Album"
                         Label="Album"
                         Required="true"
                         RequiredError="Album is required" />

            <MudTextField @bind-Value="Song.Genre"
                         Label="Genre"
                         Required="true"
                         RequiredError="Genre is required" />

            <MudNumericField T="int" @bind-Value="DurationInSeconds" 
                            Label="Duration (seconds)" 
                            Variant="Variant.Outlined" 
                            Min="0" />
            
            <MudDatePicker Date="@Song.ReleaseDate" DateChanged="@(date => Song.ReleaseDate = date ?? DateTime.Now)"
                          Label="Release Date"
                          Variant="Variant.Outlined" />
            
            <MudFileUpload T="IBrowserFile" FilesChanged="OnFileSelected">
                <ButtonTemplate>
                    <MudButton HtmlTag="label"
                              Variant="Variant.Filled"
                              Color="Color.Primary"
                              StartIcon="@Icons.Material.Filled.CloudUpload"
                              for="@context">
                        Upload Music File
                    </MudButton>
                </ButtonTemplate>
            </MudFileUpload>
            @if (_selectedFile != null)
            {
                <MudText Class="mt-2">Selected file: @_selectedFile.Name</MudText>
            }
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary"
                   OnClick="Submit"
                   Disabled="@(!_isValid || _isSubmitting)">
            @if (_isSubmitting)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Saving</MudText>
            }
            else
            {
                <MudText>Save</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public Song Song { get; set; } = new();
    [Parameter] public EventCallback<Song> OnSongSaved { get; set; }

    private MudForm _form = default!;
    private bool _isValid;
    private bool _isSubmitting;
    private IBrowserFile? _selectedFile;

    private int DurationInSeconds
    {
        get => (int)Song.Duration.TotalSeconds;
        set => Song.Duration = TimeSpan.FromSeconds(value);
    }

    private void Cancel() => MudDialog.Cancel();

    private void OnFileSelected(IBrowserFile[] files)
    {
        _selectedFile = files.FirstOrDefault();
    }

    private async Task Submit()
    {
        if (!_isValid) return;

        _isSubmitting = true;
        try
        {
            if (Song.Id == Guid.Empty)
            {
                if (_selectedFile == null)
                {
                    Snackbar.Add("Please select a music file", Severity.Warning);
                    return;
                }

                using var stream = _selectedFile.OpenReadStream();
                var result = await SongService.CreateSongAsync(Song, stream, _selectedFile.Name);
                await OnSongSaved.InvokeAsync(result);
                Snackbar.Add("Song created successfully", Severity.Success);
                MudDialog.Close(DialogResult.Ok(result));
            }
            else
            {
                var result = await SongService.UpdateSongAsync(Song);
                await OnSongSaved.InvokeAsync(result);
                Snackbar.Add("Song updated successfully", Severity.Success);
                MudDialog.Close(DialogResult.Ok(result));
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving song: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSubmitting = false;
        }
    }
}
