@page "/playlists"
@using music_manager_starter.Shared
@inject IPlaylistService PlaylistService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="pa-4">
                <MudStack Row="true" Justify="Justify.SpaceBetween">
                    <MudText Typo="Typo.h5">My Playlists</MudText>
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary"
                              OnClick="CreatePlaylist">
                        Create Playlist
                    </MudButton>
                </MudStack>
            </MudPaper>
        </MudItem>

        @if (_isLoading)
        {
            <MudItem xs="12" Class="d-flex justify-center">
                <Loading IsLoading="true" />
            </MudItem>
        }
        else if (!_playlists.Any())
        {
            <MudItem xs="12">
                <MudAlert Severity="Severity.Info">
                    No playlists found. Create one to get started!
                </MudAlert>
            </MudItem>
        }
        else
        {
            @foreach (var playlist in _playlists)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@playlist.Name</MudText>
                                <MudText Typo="Typo.body2">@playlist.Description</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                                    <MudMenuItem OnClick="@(() => EditPlaylist(playlist))">Edit</MudMenuItem>
                                    <MudMenuItem OnClick="@(() => DeletePlaylist(playlist))">Delete</MudMenuItem>
                                </MudMenu>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudList Clickable="true">
                                @foreach (var playlistSong in playlist.Songs.OrderBy(ps => ps.Order))
                                {
                                    <MudListItem>
                                        <div class="d-flex justify-space-between align-center">
                                            <div>
                                                <MudText Typo="Typo.body1">@playlistSong.Song.Title</MudText>
                                                <MudText Typo="Typo.body2">@playlistSong.Song.Artist</MudText>
                                            </div>
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                         Size="Size.Small"
                                                         OnClick="@(() => RemoveSongFromPlaylist(playlist.Id, playlistSong.SongId))" />
                                        </div>
                                    </MudListItem>
                                }
                            </MudList>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        }
    </MudGrid>
</MudContainer>

@code {
    private List<Playlist> _playlists = new();
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadPlaylists();
    }

    private async Task LoadPlaylists()
    {
        try
        {
            _isLoading = true;
            _playlists = await PlaylistService.GetPlaylistsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading playlists: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task CreatePlaylist()
    {
        var dialog = await DialogService.ShowAsync<PlaylistDialog>("Create Playlist");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadPlaylists();
        }
    }

    private async Task EditPlaylist(Playlist playlist)
    {
        var parameters = new DialogParameters { ["Playlist"] = playlist };
        var dialog = await DialogService.ShowAsync<PlaylistDialog>("Edit Playlist", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadPlaylists();
        }
    }

    private async Task DeletePlaylist(Playlist playlist)
    {
        var confirm = await DialogService.ShowMessageBox(
            "Delete Playlist",
            "Are you sure you want to delete this playlist?",
            yesText: "Delete",
            cancelText: "Cancel");

        if (confirm == true)
        {
            try
            {
                await PlaylistService.DeletePlaylistAsync(playlist.Id);
                await LoadPlaylists();
                Snackbar.Add("Playlist deleted successfully", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting playlist: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task RemoveSongFromPlaylist(Guid playlistId, Guid songId)
    {
        try
        {
            await PlaylistService.RemoveSongFromPlaylistAsync(playlistId, songId);
            await LoadPlaylists();
            Snackbar.Add("Song removed from playlist", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error removing song from playlist: {ex.Message}", Severity.Error);
        }
    }
}
