@page "/playlists"
@using music_manager_starter.Shared
@inject IPlaylistService PlaylistService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Playlists</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="pa-4">
                <MudToolBar>
                    <MudText Typo="Typo.h6">Playlists</MudText>
                    <MudSpacer />
                    <MudButton Color="Color.Primary"
                              StartIcon="@Icons.Material.Filled.Add"
                              OnClick="CreatePlaylist">
                        Create Playlist
                    </MudButton>
                </MudToolBar>
            </MudPaper>
        </MudItem>

        @if (_playlists == null)
        {
            <MudItem xs="12">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </MudItem>
        }
        else if (!_playlists.Any())
        {
            <MudItem xs="12">
                <MudAlert Severity="Severity.Info">No playlists found. Create one to get started!</MudAlert>
            </MudItem>
        }
        else
        {
            @foreach (var playlist in _playlists)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@playlist.Name</MudText>
                                <MudText Typo="Typo.body2">@playlist.PlaylistSongs.Count songs</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                                    <MudMenuItem OnClick="@(() => EditPlaylist(playlist))">Edit</MudMenuItem>
                                    <MudMenuItem OnClick="@(() => DeletePlaylist(playlist.Id))">Delete</MudMenuItem>
                                </MudMenu>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText>@playlist.Description</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton EndIcon="@Icons.Material.Filled.PlayArrow"
                                      Color="Color.Primary"
                                      Variant="Variant.Text">
                                Play
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        }
    </MudGrid>
</MudContainer>

@code {
    private List<Playlist>? _playlists;

    protected override async Task OnInitializedAsync()
    {
        await LoadPlaylists();
    }

    private async Task LoadPlaylists()
    {
        try
        {
            _playlists = (await PlaylistService.GetPlaylistsAsync()).ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error loading playlists: " + ex.Message, Severity.Error);
        }
    }

    private async Task CreatePlaylist()
    {
        var dialog = await DialogService.ShowAsync<PlaylistDialog>("Create Playlist",
            new DialogParameters { ["Playlist"] = new Playlist() });
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadPlaylists();
        }
    }

    private async Task EditPlaylist(Playlist playlist)
    {
        var parameters = new DialogParameters { ["Playlist"] = playlist };
        var dialog = await DialogService.ShowAsync<PlaylistDialog>("Edit Playlist", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadPlaylists();
        }
    }

    private async Task DeletePlaylist(int id)
    {
        var parameters = new DialogParameters
        {
            ["ContentText"] = "Are you sure you want to delete this playlist?",
            ["ButtonText"] = "Delete",
            ["Color"] = Color.Error
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Delete Playlist", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await PlaylistService.DeletePlaylistAsync(id);
                Snackbar.Add("Playlist deleted successfully", Severity.Success);
                await LoadPlaylists();
            }
            catch (Exception ex)
            {
                Snackbar.Add("Error deleting playlist: " + ex.Message, Severity.Error);
            }
        }
    }
}
