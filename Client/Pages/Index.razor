@page "/"
@using music_manager_starter.Shared
@inject ISongService SongService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <div class="d-flex align-center gap-4">
        <MudText Typo="Typo.h5" Class="font-bold shrink-0">Songs</MudText>
        <div class="flex-grow-1">
            <MudTextField @bind-Value="searchTerm"
                         Placeholder="Search songs..."
                         Adornment="Adornment.Start"
                         AdornmentIcon="@Icons.Material.Filled.Search"
                         Variant="Variant.Outlined"
                         Class="mt-0"
                         FullWidth="true"
                         @onkeyup="SearchKeyUp" />
        </div>
        <MudButton Variant="Variant.Filled"
                  Color="Color.Primary"
                  StartIcon="@Icons.Material.Filled.Add"
                  OnClick="CreateSong"
                  Class="rounded-full px-6 shrink-0">
            Add Song
        </MudButton>
    </div>

    <div class="mt-6">
        @if (songs == null)
        {
            <div class="d-flex justify-center">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </div>
        }
        else if (!songs.Any())
        {
            <MudPaper Elevation="0" Class="pa-16 rounded-lg bg-white/50 dark:bg-gray-800/50 backdrop-blur-sm">
                <div class="d-flex flex-column align-center text-center">
                    <div class="mb-6 position-relative">
                        <MudIcon Icon="@Icons.Material.Filled.Album" 
                                Color="Color.Primary" 
                                Size="Size.Large" 
                                Class="music-icon-large" />
                        <MudIcon Icon="@Icons.Material.Filled.MusicNote" 
                                Color="Color.Secondary" 
                                Size="Size.Medium"
                                Class="position-absolute music-note-1" />
                        <MudIcon Icon="@Icons.Material.Filled.MusicNote" 
                                Color="Color.Primary" 
                                Size="Size.Small"
                                Class="position-absolute music-note-2" />
                        <MudIcon Icon="@Icons.Material.Filled.MusicNote" 
                                Color="Color.Secondary" 
                                Size="Size.Small"
                                Class="position-absolute music-note-3" />
                    </div>
                    <MudText Typo="Typo.h4" Class="mb-4">Your Music Library is Empty</MudText>
                    <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mb-6 max-width-sm mx-auto">
                        Start building your music collection! Add your favorite songs and create custom playlists.
                    </MudText>
                    <div class="d-flex gap-3 flex-wrap justify-center">
                        <MudButton Variant="Variant.Filled"
                                 Color="Color.Primary"
                                 StartIcon="@Icons.Material.Filled.Add"
                                 OnClick="CreateSong"
                                 Size="Size.Large"
                                 Class="rounded-full px-8">
                            Add Your First Song
                        </MudButton>
                        <MudButton Variant="Variant.Outlined"
                                 Color="Color.Primary"
                                 StartIcon="@Icons.Material.Filled.PlaylistAdd"
                                 Href="/playlists"
                                 Size="Size.Large"
                                 Class="rounded-full px-8">
                            Create Playlist
                        </MudButton>
                    </div>
                    
                    <MudDivider Class="my-12" />
                    
                    <MudText Typo="Typo.h6" Class="mb-4">Quick Tips</MudText>
                    <div class="d-flex gap-4 flex-wrap justify-center">
                        <MudPaper Elevation="0" Class="pa-4 rounded-lg bg-surface dark:bg-gray-900 flex-grow-0" Style="min-width: 200px; max-width: 250px;">
                            <MudIcon Icon="@Icons.Material.Filled.CloudUpload" Color="Color.Primary" Class="mb-2" />
                            <MudText Typo="Typo.subtitle1" Class="mb-2">Upload Songs</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">
                                Add your music files directly from your device
                            </MudText>
                        </MudPaper>
                        <MudPaper Elevation="0" Class="pa-4 rounded-lg bg-surface dark:bg-gray-900 flex-grow-0" Style="min-width: 200px; max-width: 250px;">
                            <MudIcon Icon="@Icons.Material.Filled.PlaylistPlay" Color="Color.Primary" Class="mb-2" />
                            <MudText Typo="Typo.subtitle1" Class="mb-2">Create Playlists</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">
                                Organize your music into custom playlists
                            </MudText>
                        </MudPaper>
                        <MudPaper Elevation="0" Class="pa-4 rounded-lg bg-surface dark:bg-gray-900 flex-grow-0" Style="min-width: 200px; max-width: 250px;">
                            <MudIcon Icon="@Icons.Material.Filled.Favorite" Color="Color.Primary" Class="mb-2" />
                            <MudText Typo="Typo.subtitle1" Class="mb-2">Mark Favorites</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">
                                Save your favorite tracks for quick access
                            </MudText>
                        </MudPaper>
                    </div>
                </div>
            </MudPaper>
        }
        else
        {
            <MudGrid>
                <MudItem xs="12">
                    <MudPaper Elevation="0" Class="pa-4 rounded-lg bg-white/50 dark:bg-gray-800/50 backdrop-blur-sm">
                        <MudList Clickable="true" Class="pa-0">
                            <MudListSubheader Class="px-4 d-flex gap-4 align-center">
                                <MudIcon Icon="@Icons.Material.Filled.AudioFile" Color="Color.Primary" />
                                <div class="flex-grow-1">Title / Artist</div>
                                <div style="width: 150px;">Album</div>
                                <div style="width: 100px;">Genre</div>
                                <div style="width: 100px;"></div>
                            </MudListSubheader>
                            
                            @foreach (var song in songs)
                            {
                                <MudListItem Class="px-4 rounded-lg hover:bg-surface dark:hover:bg-gray-700 transition-all">
                                    <div class="d-flex gap-4 align-center py-2">
                                        <MudAvatar Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small">
                                            <MudIcon Icon="@Icons.Material.Filled.MusicNote" Size="Size.Small" />
                                        </MudAvatar>
                                        
                                        <div class="flex-grow-1 min-width-0">
                                            <MudText Typo="Typo.body1" Class="font-bold text-truncate">@song.Title</MudText>
                                            <MudText Typo="Typo.caption" Color="Color.Secondary" Class="text-truncate">@song.Artist</MudText>
                                        </div>
                                        
                                        <div style="width: 150px;" class="d-none d-sm-block">
                                            <MudText Typo="Typo.body2" Class="text-truncate">@song.Album</MudText>
                                        </div>
                                        
                                        <div style="width: 100px;" class="d-none d-md-block">
                                            <MudChip Size="Size.Small" 
                                                    Color="Color.Primary" 
                                                    Variant="Variant.Text"
                                                    Label="true">@song.Genre</MudChip>
                                        </div>
                                        
                                        <div style="width: 100px;" class="d-flex gap-2 justify-end">
                                            <MudIconButton Icon="@Icons.Material.Filled.PlaylistAdd"
                                                         Size="Size.Small"
                                                         Color="Color.Primary"
                                                         Variant="Variant.Text"
                                                         OnClick="@(() => AddToPlaylist(song))" />
                                            <MudMenu Icon="@Icons.Material.Filled.MoreVert" 
                                                    Dense="true" 
                                                    AnchorOrigin="Origin.BottomRight"
                                                    TransformOrigin="Origin.TopRight">
                                                <MudMenuItem OnClick="@(() => EditSong(song))">
                                                    <div class="d-flex gap-2 align-center">
                                                        <MudIcon Icon="@Icons.Material.Filled.Edit" Size="Size.Small" />
                                                        Edit
                                                    </div>
                                                </MudMenuItem>
                                                <MudMenuItem OnClick="@(() => DeleteSong(song.Id))" Class="text-error">
                                                    <div class="d-flex gap-2 align-center">
                                                        <MudIcon Icon="@Icons.Material.Filled.Delete" Size="Size.Small" />
                                                        Delete
                                                    </div>
                                                </MudMenuItem>
                                            </MudMenu>
                                        </div>
                                    </div>
                                </MudListItem>
                            }
                        </MudList>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        }
    </div>
</MudContainer>

<style>
    .music-icon-large {
        font-size: 64px;
    }
    
    .music-note-1 {
        animation: float 3s ease-in-out infinite;
        right: -20px;
        top: -10px;
    }
    
    .music-note-2 {
        animation: float 2.5s ease-in-out infinite 0.5s;
        left: -15px;
        top: 10px;
    }
    
    .music-note-3 {
        animation: float 2s ease-in-out infinite 1s;
        right: -10px;
        bottom: -5px;
    }
    
    @keyframes float {
        0% {
            transform: translateY(0px);
            opacity: 0.5;
        }
        50% {
            transform: translateY(-10px);
            opacity: 1;
        }
        100% {
            transform: translateY(0px);
            opacity: 0.5;
        }
    }
    
    .max-width-sm {
        max-width: 500px;
    }
</style>

@code {
    private List<Song> songs = new();
    private string searchTerm = "";
    private Timer? searchTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadSongs();
    }

    private async Task LoadSongs()
    {
        try
        {
            var result = await SongService.GetSongsAsync(searchTerm);
            songs = result.ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading songs: {ex.Message}", Severity.Error);
        }
    }

    private async Task CreateSong()
    {
        var parameters = new DialogParameters { ["Song"] = new Song() };
        var dialog = await DialogService.ShowAsync<SongEditDialog>("Create Song", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadSongs();
        }
    }

    private async Task EditSong(Song song)
    {
        var parameters = new DialogParameters { ["Song"] = song };
        var dialog = await DialogService.ShowAsync<SongEditDialog>("Edit Song", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadSongs();
        }
    }

    private async Task DeleteSong(int id)
    {
        var parameters = new DialogParameters
        {
            ["ContentText"] = "Are you sure you want to delete this song?",
            ["ButtonText"] = "Delete",
            ["Color"] = Color.Error
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Delete Song", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await SongService.DeleteSongAsync(id);
                Snackbar.Add("Song deleted successfully", Severity.Success);
                await LoadSongs();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting song: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task AddToPlaylist(Song song)
    {
        var parameters = new DialogParameters { ["Song"] = song };
        var dialog = await DialogService.ShowAsync<PlaylistSelectorDialog>("Add to Playlist", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            Snackbar.Add("Song added to playlist successfully", Severity.Success);
        }
    }

    private void SearchKeyUp(KeyboardEventArgs e)
    {
        searchTimer?.Dispose();
        searchTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await LoadSongs();
                StateHasChanged();
            });
        }, null, 500, Timeout.Infinite);
    }
}