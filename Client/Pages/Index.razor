@page "/"
@using music_manager_starter.Shared
@inject ISongService SongService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Songs</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h3" Class="mb-4">Songs</MudText>

    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="pa-4">
                <MudButton OnClick="AddSong" 
                          Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          Class="mb-4">Add Song</MudButton>

                <MudTextField @bind-Value="searchTerm"
                            Label="Search"
                            Variant="Variant.Outlined"
                            Adornment="Adornment.Start"
                            AdornmentIcon="@Icons.Material.Filled.Search"
                            OnKeyUp="@SearchKeyUp"
                            Class="mb-4" />

                @if (songs == null)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                }
                else
                {
                    <MudGrid>
                        @foreach (var song in songs)
                        {
                            <MudItem xs="12" sm="6" md="4">
                                <SongCard Song="song" 
                                         OnEdit="EditSong"
                                         OnDelete="DeleteSong"
                                         OnAddToPlaylist="AddToPlaylist" />
                            </MudItem>
                        }
                    </MudGrid>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private List<Song>? songs;
    private string searchTerm = "";
    private Timer? searchTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadSongs();
    }

    private async Task LoadSongs(string? search = null)
    {
        try
        {
            songs = await SongService.GetSongsAsync(search);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading songs: {ex.Message}", Severity.Error);
        }
    }

    private async Task AddSong()
    {
        var dialog = await DialogService.ShowAsync<SongEditDialog>("Add Song");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var song = (Song)result.Data;
            try
            {
                await SongService.AddSongAsync(song);
                await LoadSongs();
                Snackbar.Add("Song added successfully", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error adding song: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task EditSong(Song song)
    {
        var parameters = new DialogParameters { ["Song"] = song };
        var dialog = await DialogService.ShowAsync<SongEditDialog>("Edit Song", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var updatedSong = (Song)result.Data;
            try
            {
                await SongService.UpdateSongAsync(updatedSong);
                await LoadSongs();
                Snackbar.Add("Song updated successfully", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error updating song: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task DeleteSong(Song song)
    {
        var parameters = new DialogParameters
        {
            ["ContentText"] = "Are you sure you want to delete this song?",
            ["ButtonText"] = "Delete",
            ["Color"] = Color.Error
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Delete Song", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await SongService.DeleteSongAsync(song.Id);
                await LoadSongs();
                Snackbar.Add("Song deleted successfully", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting song: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task AddToPlaylist(Song song)
    {
        var parameters = new DialogParameters
        {
            ["Song"] = song
        };
        var dialog = await DialogService.ShowAsync<PlaylistSelectorDialog>("Add to Playlist", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            Snackbar.Add("Song added to playlist successfully!", Severity.Success);
        }
    }

    private void SearchKeyUp(KeyboardEventArgs e)
    {
        searchTimer?.Dispose();
        searchTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await LoadSongs(searchTerm);
                StateHasChanged();
            });
        }, null, 500, Timeout.Infinite);
    }
}