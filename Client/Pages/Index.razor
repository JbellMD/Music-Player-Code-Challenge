@page "/"
@using music_manager_starter.Shared
@inject ISongService SongService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Music Manager</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="pa-4">
                <MudToolBar>
                    <MudText Typo="Typo.h6">Songs</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchTerm"
                                Placeholder="Search songs..."
                                Adornment="Adornment.Start"
                                AdornmentIcon="@Icons.Material.Filled.Search"
                                Class="mt-0 mr-2"
                                @onkeyup="SearchKeyUp" />
                    <MudButton Color="Color.Primary"
                              StartIcon="@Icons.Material.Filled.Add"
                              OnClick="CreateSong">
                        Add Song
                    </MudButton>
                </MudToolBar>
            </MudPaper>
        </MudItem>

        @if (songs == null)
        {
            <MudItem xs="12">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </MudItem>
        }
        else if (!songs.Any())
        {
            <MudItem xs="12">
                <MudAlert Severity="Severity.Info">No songs found. Add one to get started!</MudAlert>
            </MudItem>
        }
        else
        {
            @foreach (var song in songs)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@song.Title</MudText>
                                <MudText Typo="Typo.body2">@song.Artist</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                                    <MudMenuItem OnClick="@(() => EditSong(song))">Edit</MudMenuItem>
                                    <MudMenuItem OnClick="@(() => DeleteSong(song.Id))">Delete</MudMenuItem>
                                    <MudMenuItem OnClick="@(() => AddToPlaylist(song))">Add to Playlist</MudMenuItem>
                                </MudMenu>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText>Album: @song.Album</MudText>
                            <MudText>Genre: @song.Genre</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudRating @bind-Value="song.Rating" MaxValue="5" Color="Color.Primary" />
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        }
    </MudGrid>
</MudContainer>

@code {
    private List<Song> songs = new();
    private string searchTerm = "";
    private Timer? searchTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadSongs();
    }

    private async Task LoadSongs()
    {
        try
        {
            var result = await SongService.GetSongsAsync(searchTerm);
            songs = result.ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading songs: {ex.Message}", Severity.Error);
        }
    }

    private async Task CreateSong()
    {
        var parameters = new DialogParameters { ["Song"] = new Song() };
        var dialog = await DialogService.ShowAsync<SongEditDialog>("Create Song", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadSongs();
        }
    }

    private async Task EditSong(Song song)
    {
        var parameters = new DialogParameters { ["Song"] = song };
        var dialog = await DialogService.ShowAsync<SongEditDialog>("Edit Song", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadSongs();
        }
    }

    private async Task DeleteSong(int id)
    {
        var parameters = new DialogParameters
        {
            ["ContentText"] = "Are you sure you want to delete this song?",
            ["ButtonText"] = "Delete",
            ["Color"] = Color.Error
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Delete Song", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await SongService.DeleteSongAsync(id);
                Snackbar.Add("Song deleted successfully", Severity.Success);
                await LoadSongs();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting song: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task AddToPlaylist(Song song)
    {
        var parameters = new DialogParameters { ["Song"] = song };
        var dialog = await DialogService.ShowAsync<PlaylistSelectorDialog>("Add to Playlist", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            Snackbar.Add("Song added to playlist successfully", Severity.Success);
        }
    }

    private void SearchKeyUp(KeyboardEventArgs e)
    {
        searchTimer?.Dispose();
        searchTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await LoadSongs();
                StateHasChanged();
            });
        }, null, 500, Timeout.Infinite);
    }
}