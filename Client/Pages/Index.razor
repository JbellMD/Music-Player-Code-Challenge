@page "/"
@using music_manager_starter.Shared
@inject ISongService SongService
@inject IPlaylistService PlaylistService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="pa-4">
                <MudStack Row="true" Justify="Justify.SpaceBetween">
                    <MudTextField @bind-Value="_searchQuery" 
                                Label="Search songs" 
                                Variant="Variant.Outlined"
                                Adornment="Adornment.Start"
                                AdornmentIcon="@Icons.Material.Filled.Search"
                                OnKeyUp="@(async (e) => { if (e.Key == "Enter") await SearchSongs(); })" />
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary"
                              OnClick="AddNewSong">
                        Add Song
                    </MudButton>
                </MudStack>
            </MudPaper>
        </MudItem>

        @if (_isLoading)
        {
            <MudItem xs="12" Class="d-flex justify-center">
                <Loading IsLoading="true" />
            </MudItem>
        }
        else
        {
            @foreach (var song in _songs)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <SongCard Song="@song"
                             OnPlay="@PlaySong"
                             OnAddToPlaylist="@AddToPlaylist"
                             OnEdit="@EditSong"
                             OnDelete="@DeleteSong" />
                </MudItem>
            }
        }
    </MudGrid>
</MudContainer>

@code {
    private List<Song> _songs = new();
    private string _searchQuery = "";
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadSongs();
    }

    private async Task LoadSongs()
    {
        try
        {
            _isLoading = true;
            _songs = await SongService.GetSongsAsync(_searchQuery);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading songs: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task SearchSongs()
    {
        await LoadSongs();
    }

    private async Task AddNewSong()
    {
        var dialog = await DialogService.ShowAsync<SongEditDialog>("Add New Song");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadSongs();
        }
    }

    private async Task EditSong(Song song)
    {
        var parameters = new DialogParameters { ["Song"] = song };
        var dialog = await DialogService.ShowAsync<SongEditDialog>("Edit Song", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadSongs();
        }
    }

    private async Task DeleteSong(Song song)
    {
        var confirm = await DialogService.ShowMessageBox(
            "Delete Song",
            "Are you sure you want to delete this song?",
            yesText: "Delete",
            cancelText: "Cancel");

        if (confirm == true)
        {
            try
            {
                await SongService.DeleteSongAsync(song.Id);
                await LoadSongs();
                Snackbar.Add("Song deleted successfully", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting song: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task PlaySong(Song song)
    {
        // TODO: Implement audio playback
        Snackbar.Add($"Playing {song.Title}", Severity.Info);
    }

    private async Task AddToPlaylist(Song song)
    {
        var playlists = await PlaylistService.GetPlaylistsAsync();
        var options = playlists.Select(p => new DialogChoice { Id = p.Id.ToString(), Text = p.Name }).ToArray();

        var playlistId = await DialogService.ShowChoices("Add to Playlist", 
            "Select a playlist", 
            options,
            submitText: "Add",
            cancelText: "Cancel");

        if (!string.IsNullOrEmpty(playlistId))
        {
            try
            {
                await PlaylistService.AddSongToPlaylistAsync(Guid.Parse(playlistId), song.Id);
                Snackbar.Add("Song added to playlist", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error adding song to playlist: {ex.Message}", Severity.Error);
            }
        }
    }
}