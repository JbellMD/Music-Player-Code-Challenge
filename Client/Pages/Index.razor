@page "/"
@using music_manager_starter.Shared
@inject ISongService SongService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudPaper Elevation="0" Class="pa-4 rounded-lg bg-white/80 backdrop-blur-sm">
        <MudToolBar DisableGutters="true">
            <MudText Typo="Typo.h5" Class="font-bold">Songs</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchTerm"
                         Placeholder="Search songs..."
                         Adornment="Adornment.Start"
                         AdornmentIcon="@Icons.Material.Filled.Search"
                         Class="mt-0 mr-2"
                         Variant="Variant.Outlined"
                         @onkeyup="SearchKeyUp" />
            <MudButton Variant="Variant.Filled"
                      Color="Color.Primary"
                      StartIcon="@Icons.Material.Filled.Add"
                      OnClick="CreateSong"
                      Class="rounded-full px-6">
                Add Song
            </MudButton>
        </MudToolBar>
    </MudPaper>

    <div class="mt-6">
        @if (songs == null)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        }
        else if (!songs.Any())
        {
            <MudPaper Elevation="0" Class="pa-8 rounded-lg bg-white/80 backdrop-blur-sm text-center">
                <MudIcon Icon="@Icons.Material.Filled.MusicNote" Color="Color.Primary" Size="Size.Large" />
                <MudText Typo="Typo.h6" Class="mt-4">No songs found</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-2">Add your first song to get started!</MudText>
            </MudPaper>
        }
        else
        {
            <MudGrid>
                @foreach (var song in songs)
                {
                    <MudItem xs="12" sm="6" md="4">
                        <MudPaper Elevation="0" Class="pa-4 rounded-lg bg-white/80 backdrop-blur-sm transition-all hover:shadow-lg">
                            <div class="d-flex flex-column h-100">
                                <div class="d-flex align-center mb-4">
                                    <MudAvatar Color="Color.Primary" Variant="Variant.Filled" Class="mr-3">
                                        <MudIcon Icon="@Icons.Material.Filled.Album" />
                                    </MudAvatar>
                                    <div>
                                        <MudText Typo="Typo.h6" Class="font-bold">@song.Title</MudText>
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">@song.Artist</MudText>
                                    </div>
                                </div>
                                
                                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-2">
                                    <MudIcon Icon="@Icons.Material.Filled.Album" Size="Size.Small" Class="mr-2" />@song.Album
                                </MudText>
                                
                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                    <MudIcon Icon="@Icons.Material.Filled.Category" Size="Size.Small" Class="mr-2" />@song.Genre
                                </MudText>

                                <MudDivider Class="my-4" />
                                
                                <div class="d-flex justify-space-between mt-auto">
                                    <MudButton Variant="Variant.Text"
                                             Color="Color.Primary"
                                             OnClick="@(() => AddToPlaylist(song))"
                                             StartIcon="@Icons.Material.Filled.PlaylistAdd">
                                        Add to Playlist
                                    </MudButton>
                                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Dense="true" AnchorOrigin="Origin.BottomRight">
                                        <MudMenuItem OnClick="@(() => EditSong(song))">Edit</MudMenuItem>
                                        <MudMenuItem OnClick="@(() => DeleteSong(song.Id))" Class="text-error">Delete</MudMenuItem>
                                    </MudMenu>
                                </div>
                            </div>
                        </MudPaper>
                    </MudItem>
                }
            </MudGrid>
        }
    </div>
</MudContainer>

@code {
    private List<Song> songs = new();
    private string searchTerm = "";
    private Timer? searchTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadSongs();
    }

    private async Task LoadSongs()
    {
        try
        {
            var result = await SongService.GetSongsAsync(searchTerm);
            songs = result.ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading songs: {ex.Message}", Severity.Error);
        }
    }

    private async Task CreateSong()
    {
        var parameters = new DialogParameters { ["Song"] = new Song() };
        var dialog = await DialogService.ShowAsync<SongEditDialog>("Create Song", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadSongs();
        }
    }

    private async Task EditSong(Song song)
    {
        var parameters = new DialogParameters { ["Song"] = song };
        var dialog = await DialogService.ShowAsync<SongEditDialog>("Edit Song", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadSongs();
        }
    }

    private async Task DeleteSong(int id)
    {
        var parameters = new DialogParameters
        {
            ["ContentText"] = "Are you sure you want to delete this song?",
            ["ButtonText"] = "Delete",
            ["Color"] = Color.Error
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Delete Song", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await SongService.DeleteSongAsync(id);
                Snackbar.Add("Song deleted successfully", Severity.Success);
                await LoadSongs();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting song: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task AddToPlaylist(Song song)
    {
        var parameters = new DialogParameters { ["Song"] = song };
        var dialog = await DialogService.ShowAsync<PlaylistSelectorDialog>("Add to Playlist", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            Snackbar.Add("Song added to playlist successfully", Severity.Success);
        }
    }

    private void SearchKeyUp(KeyboardEventArgs e)
    {
        searchTimer?.Dispose();
        searchTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await LoadSongs();
                StateHasChanged();
            });
        }, null, 500, Timeout.Infinite);
    }
}